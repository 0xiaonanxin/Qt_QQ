#pragma once

#include <QWebEngineView>
#include <QDomNode>

class MsgHtmlObj :public QObject 
{
	Q_OBJECT
	//动态属性 别人发来的信息
	Q_PROPERTY(QString msgLHtmlTmpl MEMBER m_msgLHtmlTmpl NOTIFY signalMsgHtml)
	//动态属性 我发的信息
	Q_PROPERTY(QString msgRHtmlTmpl MEMBER m_msgRHtmlTmpl NOTIFY signalMsgHtml)
	
public:
	//msgLPicPath 发信息来的人的头像路径
	MsgHtmlObj(QObject* parent,QString msgLPicPath = "");

signals:
	void signalMsgHtml(const QString& html);

private:
	void initHtmlTmpl();//初始化聊天网页
	//对左右窗口分别进行初始化
	QString getMsgTmplHtml(const QString& code);

private:
	QString m_msgLPicPath; //发信息来的人的头像路径
	QString m_msgLHtmlTmpl;//别人发来的信息
	QString m_msgRHtmlTmpl;//我发的信息
};

class MsgWebPage :public QWebEnginePage
{
	Q_OBJECT

public:
	MsgWebPage(QObject* parent = nullptr) :QWebEnginePage(parent) {};

protected:
	bool acceptNavigationRequest(const QUrl& url, NavigationType type, bool isMainFrame);
};

//QWebEngineView视图用于显示网页内容
class MsgWebView : public QWebEngineView
{
	Q_OBJECT

public:
	MsgWebView(QWidget *parent);
	~MsgWebView();
	void appendMsg(const QString& html, QString strObj = "0");//追加信息

private:
	QList<QStringList> parseHtml(const QString& html);
	
	//Qt中所有DOM节点（属性、说明。文本等）都可以使用QDomNode进行表示
	QList<QStringList> parseDocNode(const QDomNode& node);//解析节点

signals:
	void signalSendMag(QString& strData, int& magType, QString sFile = "");

private:
	MsgHtmlObj* m_msgHtmlObj;
	QWebChannel* m_channel;
};
